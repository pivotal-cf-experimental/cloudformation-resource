#!/bin/bash

set -eux
set -o pipefail

exec 3>&1 # use fd 3 for script output
exec 1>&2 # send normal stdout to stderr for logging

WORKING_DIR=$1
echo "WORKING_DIR = $WORKING_DIR"

# read stdin
jq -M -S . < /dev/stdin | tee /tmp/input

# check that the input is valid json
CLOUDFORMATION_FILE=$WORKING_DIR/$(jq -r .params.cloudformation_file < /tmp/input)
jq -C . < $CLOUDFORMATION_FILE

# load AWS crds
export AWS_ACCESS_KEY_ID=$(jq -r .source.aws_access_key < /tmp/input)
export AWS_SECRET_ACCESS_KEY=$(jq -r .source.aws_secret_key < /tmp/input)
export AWS_DEFAULT_REGION=$(jq -r .source.aws_region < /tmp/input)

# determine is user requires a changeset created
CLOUDFORMATION_CHANGE_SET=$(jq -r .source.cloudformation_change_set < /tmp/input)

# determine stack action
OLD_STACK_CONFIG=/tmp/$$-old.json
STACK_NAME=$(jq -r .params.stack_name < /tmp/input)
if aws cloudformation get-template --stack-name $STACK_NAME > $OLD_STACK_CONFIG; then
  STACK_ACTION=update-stack
else
  STACK_ACTION=create-stack
fi

# if user requested a changeset created, set STACK_ACTION appropriately
if [ "$CLOUDFORMATION_CHANGE_SET" == "true" ]; then
    STACK_ACTION="create-change-set --change-set-name $STACK_NAME-`date +%s`"
fi

# sort the cloudformation files
jq -S .TemplateBody < $OLD_STACK_CONFIG > $OLD_STACK_CONFIG.sorted
jq -S . < $CLOUDFORMATION_FILE > $CLOUDFORMATION_FILE.sorted
diff $OLD_STACK_CONFIG.sorted $CLOUDFORMATION_FILE.sorted || true

# upload the cloudformation json using the aws cli
CAPABILITIES=$(jq -r '.params.capabilities // empty' < /tmp/input)
if [ -z "$CAPABILITIES" ]; then
  CAPABILITIES_ARG=""
else
  CAPABILITIES_ARG="--capabilities=$CAPABILITIES"
fi
if ! cmp $OLD_STACK_CONFIG.sorted $CLOUDFORMATION_FILE.sorted; then
  aws cloudformation $STACK_ACTION \
    $CAPABILITIES_ARG \
    --stack-name $STACK_NAME \
    --template-body file://$CLOUDFORMATION_FILE.sorted
  
  # nothing to watch if we're just making a change-set
  if [ "$CLOUDFORMATION_CHANGE_SET" == "true" ]; then
      boosh watch --name $STACK_NAME
  fi
fi

# report status
VERSION=$(sha1sum $CLOUDFORMATION_FILE.sorted | cut -d' ' -f1)
jq -n "{version: {sha1: \"$VERSION\"}, metadata: []}" >&3
